// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String?
  image        String?
  description  String?
  categorySlug String
  category     Category  @relation(fields: [categorySlug], references: [slug])
  authorEmail  String
  author       User      @relation(fields: [authorEmail], references: [email])
  comments     Comment[]
  createdAt    DateTime  @default(now())
}

model Category {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  title String?
  slug  String  @unique

  Post Post[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userEmail String
  user      User     @relation(fields: [userEmail], references: [email])
  comment   String?
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

// model Featured{
//   id        String   @id @default(cuid()) @map("_id") @db.ObjectId

// }
